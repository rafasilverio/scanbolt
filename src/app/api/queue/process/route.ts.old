// [ARQUIVO ANTIGO] - Substituído pelo worker.js Node.js
// Mantido apenas para referência

import { verifySignature } from '@upstash/qstash/dist/nextjs'
import { NextResponse } from 'next/server'
import { analyzeContract } from '@/lib/ai'
import prisma from '@/lib/prisma'

// Proteger rota com verificação do QStash
export const POST = verifySignature(async (req: any) => {
  try {
    const { contractId, text, textCoordinates } = await req.json()

    // Atualizar status para analyzing
    await prisma.contract.update({
      where: { id: contractId },
      data: { status: 'analyzing' }
    })

    // Executar análise
    const analysisResult = await analyzeContract(
      text, 
      new Map(textCoordinates)
    )

    // Atualizar contrato com resultados
    await prisma.contract.update({
      where: { id: contractId },
      data: {
        issues: analysisResult.issues,
        suggestedClauses: analysisResult.suggestedClauses,
        status: 'under_review'
      }
    })

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Queue processing error:', error)
    
    // Atualizar status para error
    await prisma.contract.update({
      where: { id: contractId },
      data: { 
        status: 'error',
        metadata: {
          error: error instanceof Error ? error.message : 'Analysis failed'
        }
      }
    })

    return NextResponse.json(
      { error: 'Processing failed' },
      { status: 500 }
    )
  }
})

// Configurar para Edge Runtime
export const runtime = 'edge'