generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String     @id @default(uuid()) @db.Uuid
  email               String     @unique
  name                String?
  contracts_remaining Int        @default(3)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  password            String?
  provider            String     @default("credentials")
  role                Role       @default(FREE)
  contracts           Contract[]

  @@map("users")
}

model PreviewContract {
  id         String             @id @default(cuid())
  title      String
  content    String
  fileUrl    String
  fileType   String
  highlights PreviewHighlight[]
  createdAt  DateTime           @default(now())
}

model PreviewHighlight {
  id         String          @id @default(cuid())
  type       String
  message    String
  startIndex Int
  endIndex   Int
  suggestion String?
  contractId String
  contract   PreviewContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model Contract {
  id         String      @id @default(uuid()) @db.Uuid
  title      String
  content    String
  status     String
  fileUrl    String
  fileName   String
  fileType   String
  userId     String      @db.Uuid
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  highlights String      @default("[]")
  changes    String      @default("[]")
  user       User        @relation(fields: [userId], references: [id])
  Highlight  Highlight[]

  @@index([userId])
}

model Highlight {
  id         String   @id @default(cuid())
  type       String
  message    String
  startIndex Int
  endIndex   Int
  suggestion String?
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

enum Role {
  FREE
  PRO
}

enum Status {
  draft
  under_review
  approved
  rejected
}

enum contract_status {
  draft
  under_review
  approved
  rejected
}

------

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String     @id @default(uuid()) @db.Uuid
  email               String     @unique
  name                String?
  contracts_remaining Int        @default(3)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  password            String?
  provider            String     @default("credentials")
  role                Role       @default(FREE)
  contracts           Contract[]

  @@map("users")
}

model PreviewContract {
  id         String             @id @default(cuid())
  title      String
  content    String
  fileUrl    String
  fileType   String
  highlights PreviewHighlight[]
  createdAt  DateTime           @default(now())
}

model PreviewHighlight {
  id         String          @id @default(cuid())
  type       String
  message    String
  startIndex Int
  endIndex   Int
  suggestion String?
  contractId String
  contract   PreviewContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model Contract {
  id         String      @id @default(uuid()) @db.Uuid
  title      String
  content    String
  status     String
  fileUrl    String
  fileName   String
  fileType   String
  userId     String      @db.Uuid
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  highlights String      @default("[]")
  changes    String      @default("[]")
  user       User        @relation(fields: [userId], references: [id])
  Highlight  Highlight[]
  pdfPositions Json?


  @@index([userId])
}

model Highlight {
  id         String   @id @default(cuid())
  type       String
  message    String
  startIndex Int
  endIndex   Int
  suggestion String?
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

enum Role {
  FREE
  PRO
}

enum Status {
  draft
  under_review
  approved
  rejected
}

enum contract_status {
  draft
  under_review
  approved
  rejected
}
